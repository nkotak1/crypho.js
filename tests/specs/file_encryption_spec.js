define(['crypho/husher', 'crypho/sjcl'], function (husher, sjcl) {

    husher.sweatshop.registerWorker('sjcl', '../../sjcl.worker.js');

    describe('File encryption', function () {
        var h;
        var arrayBuffer;
        var _jasmine_ti;
        var b64 = '';

        beforeAll(function(done){
            _jasmine_ti = jasmine.DEFAULT_TIMEOUT_INTERVAL;

            var i;
            // Uncomment for big files
            for (i = 0 ; i < 5 ; i++) {
                b64 = b64 + b64;
            }
            jasmine.DEFAULT_TIMEOUT_INTERVAL = 50000;

            var chars = atob(b64);
            var ints = new Array(chars.length);
            for (i = 0; i < chars.length; i++) {
                ints[i] = chars.charCodeAt(i);
            }
            var byteArray = new Uint8Array(ints);
            var blob = new Blob([byteArray], {type: 'image/png'});
            var fileReader = new FileReader();
            fileReader.addEventListener("loadend", function(res) {
                arrayBuffer = this.result;
                h = new husher.Husher();
                h.generate('secret', 'foo@bar.com').done(function(){done();});
            });
            fileReader.readAsArrayBuffer(blob);
        });

        afterAll(function () {
            jasmine.DEFAULT_TIMEOUT_INTERVAL = _jasmine_ti;
        });

        it('can encrypt/decrypt a file using CCM & bitArrays', function (done) {
            var time = new Date().getTime();
            var key = husher.randomKey();
            var dataview = new DataView(arrayBuffer);
            var byteArray = new Uint8Array(arrayBuffer.byteLength);
            var reader = new window.FileReader();
            var bitArray;
            var blob;
            var i;

            for (i=0 ; i < byteArray.length; i++) {
                byteArray[i] = dataview.getUint8(i);
            }
            bitArray = husher._bytes.toBits(byteArray);

            h.encryptBinary(bitArray, key, 'foo@bar.com')
            .done(function (r) {
                console.log(new Date().getTime() - time);
                var params = r.params;
                var ct = r.ct;
                time = new Date().getTime();

                h.decryptBinary(ct, key, JSON.parse(params))
                .done(function (pt) {
                    console.log(new Date().getTime() - time);
                    byteArray = new Uint8Array(pt);
                    blob = new Blob([byteArray], {type: ''});
                    reader.readAsDataURL(blob);
                    reader.onloadend = function() {
                        pt = reader.result.split('base64,')[1];
                        expect(pt).toEqual(b64);
                        done();
                    };
                });
            });
        });

        it('can encrypt/decrypt a file using progressive OCB2', function (done) {
            time = new Date().getTime();

            var time;
            var key = husher.randomKey();
            var dataview = new DataView(arrayBuffer);
            var byteArray = new Uint8Array(arrayBuffer.byteLength);
            var bitArray;
            var reader = new window.FileReader();
            var blob;
            var i;

            for (i=0 ; i < byteArray.length; i++) {
                byteArray[i] = dataview.getUint8(i);
            }
            bitArray = husher._bytes.toBits(byteArray);
            h.encryptBinaryProgressive(bitArray, key, 'foo@bar.com')
            .done(function (r) {
                console.log(new Date().getTime() - time);
                var params = r.params;
                time = new Date().getTime();

                h.decryptBinaryProgressive(r.ct, key, r.params.iv, r.params.adata)
                .done(function (pt) {
                    pt = husher._bytes.fromBits(pt);
                    console.log(new Date().getTime() - time);
                    byteArray = new Uint8Array(pt);
                    blob = new Blob([byteArray], {type: ''});
                    reader.readAsDataURL(blob);
                    reader.onloadend = function() {
                        pt = reader.result.split('base64,')[1];
                        expect(pt).toEqual(b64);
                        done();
                    };
                });
            });
        });


    });
});